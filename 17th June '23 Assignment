1. What is the role of try and exception block?
Ans.  We use try and exception block to handle exceptions in code. Exceptions are unexpected events that can disrupt the normal flow of 
      code execution. They can occur due to various reasons, such as invalid input, unexpected conditions, resource unavailability, and 
      more.
      *Try block: In try block we place the code which can raise error in it
      *Except bloc: If an exception occurs within the "try" block, the control of the program is transferred to the"except" block, 
       allowing you to take appropriate actions to handle the exception.

2. What is the syntax for a basic try-except block?

Ans. 
try: 
      #Code that might raise an exception
except:
      #Code to handle the exception

3. What happens if an exception occurs inside a try block and there is no matching
except block?
Ans.  We use except block. This is a catch-all block that will catch any exceptions not caught by the specific "except" blocks. It's a 
      good practice to include a generic catch-all block so that unexpected exceptions don't cause the program to crash.

4. What is the difference between using a bare except block and specifying a specific exception type?

Ans.  *Specific exception type:
            When you specify a specific exception type in an except block, you are explicitly indicating that you want to catch only that particular 
            type of exception. This allows you to handle that specific exception only.
      
      *Bare (Generic) except Block:
            Using a bare except block, without specifying a specific exception type, catches all types of exceptions. This can make it 
            harder to diagnose and handle errors properly because you're treating all exceptions in the same way.

5. Can you have nested try-except blocks in Python? If yes, then give an example.
Ans. Yes,
            Ex: 
            try:
                outer_value = int(input("Enter an outer number: "))
                try:
                    inner_value = int(input("Enter an inner number: "))
                    result = outer_value / inner_value
                    print("Result:", result)
                except ZeroDivisionError:
                    print("Inner Error: Cannot divide by zero.")
                except ValueError:
                    print("Inner Error: Invalid input. Please enter a valid number.")
            except ValueError:
                print("Outer Error: Invalid input. Please enter a valid number.")
            except Exception as e:
                print("Outer Error:", e)

6. Can we use multiple exception blocks, if yes then give an example.
Ans. Yes,
            Ex:
            try:
                num = int(input("Enter a number: "))
                result = 10 / num
                print("Result:", result)
            except ZeroDivisionError:
                print("Error: Cannot divide by zero.")
            except ValueError:
                print("Error: Invalid input. Please enter a valid number.")
            except ArithmeticError:
                print("Error: Arithmetic error occurred.")
            except Exception as e:
                print("An error occurred:", e)

7. Write the reason due to which following errors are raised:
a. EOFError
b. FloatingPointError
c. IndexError
d. MemoryError
e. OverflowError
f. TabError
g. ValueError
8. Write code for the following given scenario and add try-exception block to it.
a. Program to divide two numbers
b. Program to convert a string to an integer
c. Program to access an element in a list
d. Program to handle a specific exception
e. Program to handle any exception
