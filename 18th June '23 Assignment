1. What is the role of the 'else' block in a try-except statement? Provide an example scenario where it would be useful.

Ans.  'else' block is optional and can be used to define a block of code that should run only if no exception is raised within 
      the corresponding try block. The purpose of the 'else' block is to specify code that should be executed when the try block runs 
      successfully, without encountering any exceptions.

      Ex: 
      try:
          with open('data.txt', 'r') as file:
              data = file.read()
      except FileNotFoundError:
          print("The file 'data.txt' does not exist.")
      except IOError:
          print("An error occurred while reading the file.")
      else:
          # Process the data from the file
          process_data(data)
          print("File processing completed successfully.")

2. Can a try-except block be nested inside another try-except block? Explain with an
example.
Ans.  Yes, a try-except block can be nested inside another try-except block. This is useful when you want to handle different types 
      of exceptions at different levels of your code.
            Ex:
            try:
                # Outer try block
                num = int(input("Enter a number: "))
                try:
                    # Inner try block
                    result = 10 / num
                    print("Result:", result)
                except ZeroDivisionError:
                    print("Cannot divide by zero.")
            except ValueError:
                print("Invalid input. Please enter a valid number.")

3. How can you create a custom exception class in Python? Provide an example that
demonstrates its usage.
Ans. 
            Ex:
            class CustomError(Exception):
                def __name__(self, message):
                    self.message = message
            
            def process_data(data):
                if not data:
                    raise CustomError("Empty data provided")
            try:
                data = ""
                process_data(data)
            except CustomError as e:
                print("Custom error occurred:", e)

4. What are some common exceptions that are built-in to Python?
Ans.  Python has several built-in exceptions, including:

      * ValueError: Raised when a function receives an argument of the correct type but an inappropriate value.
      * TypeError: Raised when an operation or function is applied to an object of inappropriate type.
      * IndexError: Raised when a sequence subscript is out of range.
      * KeyError: Raised when a dictionary is accessed with a key that doesn't exist.
      * FileNotFoundError: Raised when an attempt is made to open a file that doesn't exist.
      * ZeroDivisionError: Raised when division or modulo by zero occurs.

5. What is logging in Python, and why is it important in software development?
Ans.  Logging in Python is a method for recording messages that occur during the execution of a program. It provides a way to 
      capture useful information, warnings, errors, and other relevant data, which can be essential for understanding program behavior,
      and monitoring the application in production.

6. Explain the purpose of log levels in Python logging and provide examples of when each log level would be appropriate.

Ans. Log levels in Python logging define the severity or importance of a log message. Some common log levels include:

      * DEBUG: Detailed debugging information.
      * INFO: General information about program execution.
      * WARNING: Indicates a potential problem or issue.
      * ERROR: Indicates a serious error that might affect the functionality.
      * CRITICAL: Indicates a critical error that might lead to the program's termination

7. What are log formatters in Python logging, and how can you customise the log message format using formatters?

Ans.  Log formatters in Python logging determine how log messages are formatted before they are written to the log. You can customize 
      the format using the logging.Formatter class.

            Ex:
            import logging
            
            # Create a formatter
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            
            # Create a handler and set the formatter
            handler = logging.StreamHandler()
            handler.setFormatter(formatter)
            
            # Create a logger, attach the handler, and set the log level
            logger = logging.getLogger('my_logger')
            logger.addHandler(handler)
            logger.setLevel(logging.DEBUG)
            
            # Log messages using the logger
            logger.debug('This is a debug message')
            logger.info('This is an info message')
            logger.warning('This is a warning message')
            logger.error('This is an error message')
            logger.critical('This is a critical message')


8. How can you set up logging to capture log messages from multiple modules or classes in a Python application?

Ans.  We can set up a root logger and configure it to capture messages from multiple modules or classes. Each module or class can then
      retrieve a logger with its name, and the log messages will be properly categorized. 

9. What is the difference between the logging and print statements in Python? When should you use logging over print statements in a 
   real-world application?
Ans.  The print statement is used to output information to the console, typically for debugging purposes. Logging, on the other hand, 
      is a more powerful and flexible way to capture and manage program messages, allowing you to categorize messages, control their 
      output level, and direct them to various outputs (console, files, etc.).

10. Write a Python program that logs a message to a file named "app.log" with the
following requirements:
● The log message should be "Hello, World!"
● The log level should be set to "INFO."
● The log file should append new log entries without overwriting previous ones.

Ans.  
            Code:
            import logging
            
            logging.basicConfig(filename='app.log', level=logging.INFO)
            logging.info("Hello, World!")

11. Create a Python program that logs an error message to the console and a file named "errors.log" if an exception occurs during 
    the program's execution. The error message should include the exception type and a timestamp.

Ans.
            Ex:
            logging.basicConfig(filename="error.log" , level=logging.ERROR, format ='%(asctime)s  %(levelname)s  %(message)s')
            try:
                result = 10 / 0
            except Exception as e:
                logging.error(e)


