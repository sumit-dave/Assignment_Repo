1. In Python, what is the difference between a built-in function and a user-defined function? Provide an
example of each.
Ans. 
    * Built-in function are pre-defined functions. which are already given by the interpreter. like: len, max, count, print etc.
    * user-defined functions are defined by Users. User creates function per their requirements. l
        like: We can create a duplicate function of 'range() function' 
2. How can you pass arguments to a function in Python? Explain the difference between positional
arguments and keyword arguments.

Ans.  We have to use arguments veriable after creating the name of function.
      * Positional argument: We use single asterisk(*) before argument veriable. By this we can use unlimited data values while calling
        function

      * keyword arguments: We use Double asterisk(**) before argument veriable. By this we can use unlimited key-value pair data values 
        while calling function.
3. What is the purpose of the return statement in a function? Can a function have multiple return statements? Explain with an example.

Ans.   Return statement is used in a function to specify the value that function will produce after execution.
      * A function can have multiple return statement but When the function encounters a return statement, it immediately stops executing
        , exits the function and returns the value.
      * Example: this max function has two return statements, but only one of them will get executed based on the condition.
                  def max(a, b):
                      if a > b:
                          return a
                      else:
                          return b
                  
                  # Function call
                  result = max(10, 7)

   
4. What are lambda functions in Python? How are they different from regular functions? Provide an example where a lambda function 
can be useful.
Ans.  lamda function is a compact method to create a funtion. basically it is inline function often used for short and simple conditions.
      *Syntax: lambda arguments: expression
      *Example: 
               # Regular function to add two numbers
               def add(x, y):
                   return x + y
               
               # Equivalent lambda function to add two numbers
               add_lambda = lambda x, y: x + y
               
               # Using both the regular function and the lambda function
               result1 = add(5, 10)
               result2 = add_lambda(5, 10)
               
               print( result1)
               print( result2)

5. How does the concept of "scope" apply to functions in Python? Explain the difference between local
scope and global scope.

Ans.  Scope: The scope of a variable determines where it can be accessed and modified. It defines the part of the code where a variable 
      can be referenced and used.
            *local host: When a variable is defined inside a function, it has a local scope. It means that the variable is only 
             accessible within that specific function and cannot be accessed from outside the function. The veriable called as local 
             Veriable.

            *Global host: Variables defined outside any function and these veriables can be accessed and modified from anywhere in the 
             code including inside function.
6. How can you use the "return" statement in a Python function to return multiple values?

Ans.  return statement in a function to return multiple values as a tuple, a list, or any other iterable object. The return statement 
      allows you to package and return multiple values as a single entity,

      def multiple_values():
          x = 10
          y = 20
          z = 30
          return x, y, z
          return [x,y,z]
          return {"X is ":x, "Y is ":y, "Z is ":z}

      result=mulitple_values()
      print(result)

7. What is the difference between the "pass by value" and "pass by reference" concepts when it
comes to function arguments in Python?

Ans. *Pass by Value:
         In a "pass by value" system, the actual values of arguments are passed to a function. This means that any changes made to the 
         arguments within the function do not affect the original values outside the function.

     *Pass by Reference:
         In a "pass by reference" system, a reference to the original data is passed to the function. Any changes made to the data within
         the function are reflected outside the function as well.

8. Create a function that can intake integer or decimal value and do following operations:
a. Logarithmic function (log x)
b. Exponential function (exp(x))
c. Power function with base 2 (2
x
)

d. Square root

Ans.
import math

def perform_operations(value):
    log_result = math.log(value)
    exp_result = math.exp(value)
    power_result = 2 ** value
    sqrt_result = math.sqrt(value)
    
    return log_result, exp_result, power_result, sqrt_result

# Test the function
input_value = float(input("Enter a value: "))
log_result, exp_result, power_result, sqrt_result = perform_operations(input_value)

print(f"Logarithmic function (log x): {log_result}")
print(f"Exponential function (exp(x)): {exp_result}")
print(f"Power function with base 2 (2^x): {power_result}")
print(f"Square root: {sqrt_result}")

9. Create a function that takes a full name as an argument and returns first name and last name.

Ans. 
def extract_first_last_name(full_name):
    names = full_name.split()
    first_name = names[0]
    last_name = names[-1]
    return first_name, last_name

# Test the function
input_full_name = input("Enter your full name: ")
first_name, last_name = extract_first_last_name(input_full_name)
print(f"First Name: {first_name}")
print(f"Last Name: {last_name}")

