Python Basic - 2

Q.1. Create two int type variables, apply addition, subtraction, division and multiplications
and store the results in variables. Then print the data in the following format by calling the
variables:
First variable is __ & second variable is __.
Addition: __ + __ = __
Subtraction: __ - __ = __
Multiplication: __ * __ = __
Division: __ / __ = __

Ans.  *Addition:
              a=10
              b=2
              c=a+b
              print(f'First variable is {a} & second variable is {b}')
              print(f'Addition: {a} + {b} = {c}')

      *Subtraction: 
              a=10
              b=2
              c=a-b
              print(f'First variable is {a} & second variable is {b}')
              print(f'Subtraction: {a} - {b} = {c}')

      *Multiplication:
              a=10
              b=2
              c=a*b
              print(f'First variable is {a} & second variable is {b}')
              print(f'Multiplication: {a} * {b} = {c}')

      *Division:
              a=10
              b=2
              c=a*b
              print(f'First variable is {a} & second variable is {b}')
              print(f'Division: {a} / {b} = {c}')

Q.2. What is the difference between the following operators:
(i) ‘/’ & ‘//’
(ii) ‘**’ & ‘^’

Ans.  * We use ' / ' operator is the standard division operator in most programming languages. It performs regular division and 
        returns the result as a floating-point number (decimal number) if any of the operands are floating-point numbers.  
      * we use ' // ' operator is known as the floor division operator. It performs integer division, which means it always returns 
        the result as an integer.

      * We use '**' operator in many programming languages to raise a base number to a power (exponent).
      * We use this '^' symbol is also can perform like square root but '^' is not a standard exponentiation operator in most programming 
        languages. In many programming languages, '^' has other meanings, such as performing bitwise XOR operations or logical XOR  
        operations.

Q.3. List the logical operators.

Ans.  AND, OR, NOT

Q.4. Explain right shift operator and left shift operator with examples.

Ans.  *Right Shift Operator (>>):
                  The right shift operator shifts the bits of a binary number to the right by a specified number of positions.
                  Example:  10 (decimal)   =>  00001010 (binary)
                            10 >> 1        =>  00000101 (binary) => 5 (decimal)

      *Left Shift Operator (<<):
                  The left shift operator shifts the bits of a binary number to the left by a specified number of positions.
                  Example:  5 (decimal)   =>  00000101 (binary)
                            5 << 2        =>  00010100 (binary) => 20 (decimal)


Q.5. Create a list containing int type data of length 15. Then write a code to check if 10 is
present in the list or not.

Ans.  l=[1,2,3,4,5,6,7,8,98,10,11,23,45,66,77]
      n=10
      if n in l:
        print('No# 10 is present')
      else:
        print(' No# 10 not found')
